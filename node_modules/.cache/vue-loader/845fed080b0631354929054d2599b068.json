{"remainingRequest":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/monkey/Downloads/vue-cli3 demo/src/components/CanvasEdit/Index1.vue?vue&type=style&index=1&id=9af01228&scoped=true&lang=scss","dependencies":[{"path":"/Users/monkey/Downloads/vue-cli3 demo/src/components/CanvasEdit/Index1.vue","mtime":1700451179448},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/monkey/Downloads/vue-cli3 demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWVudSB7CiAgd2lkdGg6IDc5NHB4OwogIGhlaWdodDogOTBweDsKICBkaXNwbGF5OiBibG9jazsKICB0b3A6IDE0OHB4Owp9CgoubWVudS1pdGVtIHsKICBoZWlnaHQ6IDQycHg7CiAgcGFkZGluZy1sZWZ0OiAyMHB4Owp9CgouZm9vdGVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGVmdDogMDsKICB3aWR0aDogNzk0cHg7Cn0KCi5lZGl0b3I+ZGl2IHsKICBtYXJnaW46IDk1cHggYXV0bzsKfQo="},{"version":3,"sources":["Index1.vue"],"names":[],"mappingsspEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Index1.vue","sourceRoot":"src/components/CanvasEdit","sourcesContent":["<template>\n  <div class=\"editbox\">\n    <div class=\"menu\" editor-component=\"menu\">\n      <!-- <div class=\"menu-item\"> -->\n\n      <!-- </div> -->\n      <!-- <div class=\"menu-divider\"></div> -->\n      <div class=\"menu-item\">\n        <div class=\"menu-item__undo\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__redo\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__painter\" title=\"格式刷(双击可连续使用)\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__format\" title=\"清除格式\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__font\">\n          <span class=\"select\" title=\"字体\">微软雅黑</span>\n          <div class=\"options\">\n            <ul>\n              <li data-family=\"Yahei\" style=\"font-family:'Yahei';\">微软雅黑</li>\n              <li data-family=\"宋体\" style=\"font-family:'宋体';\">宋体</li>\n              <li data-family=\"黑体\" style=\"font-family:'黑体';\">黑体</li>\n              <li data-family=\"仿宋\" style=\"font-family:'仿宋';\">仿宋</li>\n              <li data-family=\"楷体\" style=\"font-family:'楷体';\">楷体</li>\n              <li data-family=\"等线\" style=\"font-family:'等线';\">等线</li>\n              <li data-family=\"华文琥珀\" style=\"font-family:'华文琥珀';\">华文琥珀</li>\n              <li data-family=\"华文楷体\" style=\"font-family:'华文楷体';\">华文楷体</li>\n              <li data-family=\"华文隶书\" style=\"font-family:'华文隶书';\">华文隶书</li>\n              <li data-family=\"华文新魏\" style=\"font-family:'华文新魏';\">华文新魏</li>\n              <li data-family=\"华文行楷\" style=\"font-family:'华文行楷';\">华文行楷</li>\n              <li data-family=\"华文中宋\" style=\"font-family:'华文中宋';\">华文中宋</li>\n              <li data-family=\"华文彩云\" style=\"font-family:'华文彩云';\">华文彩云</li>\n              <li data-family=\"Arial\" style=\"font-family:'Arial';\">Arial</li>\n              <li data-family=\"Segoe UI\" style=\"font-family:'Segoe UI';\">Segoe UI</li>\n              <li data-family=\"Ink Free\" style=\"font-family:'Ink Free';\">Ink Free</li>\n              <li data-family=\"Fantasy\" style=\"font-family:'Fantasy';\">Fantasy</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__size\">\n          <span class=\"select\" title=\"字体\">小四</span>\n          <div class=\"options\">\n            <ul>\n              <li data-size=\"56\">初号</li>\n              <li data-size=\"48\">小初</li>\n              <li data-size=\"34\">一号</li>\n              <li data-size=\"32\">小一</li>\n              <li data-size=\"29\">二号</li>\n              <li data-size=\"24\">小二</li>\n              <li data-size=\"21\">三号</li>\n              <li data-size=\"20\">小三</li>\n              <li data-size=\"18\">四号</li>\n              <li data-size=\"16\">小四</li>\n              <li data-size=\"14\">五号</li>\n              <li data-size=\"12\">小五</li>\n              <li data-size=\"10\">六号</li>\n              <li data-size=\"8\">小六</li>\n              <li data-size=\"7\">七号</li>\n              <li data-size=\"6\">八号</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__size-add\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__size-minus\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__bold\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__italic\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__underline\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__strikeout\" title=\"删除线(Ctrl+Shift+X)\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__superscript\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__subscript\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__color\" title=\"字体颜色\">\n          <i></i>\n          <span></span>\n          <input type=\"color\" id=\"color\" />\n        </div>\n        <div class=\"menu-item__highlight\" title=\"高亮\">\n          <i></i>\n          <span></span>\n          <input type=\"color\" id=\"highlight\">\n        </div>\n        <div class=\"menu-item__search\" data-menu=\"search\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__search__collapse\" data-menu=\"search\">\n          <div class=\"menu-item__search__collapse__search\">\n            <input type=\"text\" />\n            <label class=\"search-result\"></label>\n            <div class=\"arrow-left\">\n              <i></i>\n            </div>\n            <div class=\"arrow-right\">\n              <i></i>\n            </div>\n            <span>×</span>\n          </div>\n          <div class=\"menu-item__search__collapse__replace\">\n            <input type=\"text\">\n            <button>替换</button>\n          </div>\n        </div>\n        <div class=\"menu-item__print\" data-menu=\"print\">\n          <i></i>\n        </div>\n      </div>\n      <!-- <div class=\"menu-divider\"></div> -->\n      <div class=\"menu-item\">\n        <div class=\"menu-item__title\">\n          <i></i>\n          <span class=\"select\" title=\"切换标题\">正文</span>\n          <div class=\"options\">\n            <ul>\n              <li style=\"font-size:16px;\">正文</li>\n              <li data-level=\"first\" style=\"font-size:26px;\">标题1</li>\n              <li data-level=\"second\" style=\"font-size:24px;\">标题2</li>\n              <li data-level=\"third\" style=\"font-size:22px;\">标题3</li>\n              <li data-level=\"fourth\" style=\"font-size:20px;\">标题4</li>\n              <li data-level=\"fifth\" style=\"font-size:18px;\">标题5</li>\n              <li data-level=\"sixth\" style=\"font-size:16px;\">标题6</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__left\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__center\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__right\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__alignment\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__row-margin\">\n          <i title=\"行间距\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-rowmargin='1'>1</li>\n              <li data-rowmargin=\"1.25\">1.25</li>\n              <li data-rowmargin=\"1.5\">1.5</li>\n              <li data-rowmargin=\"1.75\">1.75</li>\n              <li data-rowmargin=\"2\">2</li>\n              <li data-rowmargin=\"2.5\">2.5</li>\n              <li data-rowmargin=\"3\">3</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__list\">\n          <i></i>\n          <div class=\"options\">\n            <ul>\n              <li>\n                <label>取消列表</label>\n              </li>\n              <li data-list-type=\"ol\" data-list-style='decimal'>\n                <label>有序列表：</label>\n                <ol>\n                  <li>________</li>\n                </ol>\n              </li>\n              <li data-list-type=\"ul\" data-list-style='disc'>\n                <label>实心圆点列表：</label>\n                <ul style=\"list-style-type: disc;\">\n                  <li>________</li>\n                </ul>\n              </li>\n              <li data-list-type=\"ul\" data-list-style='circle'>\n                <label>空心圆点列表：</label>\n                <ul style=\"list-style-type: circle;\">\n                  <li>________</li>\n                </ul>\n              </li>\n              <li data-list-type=\"ul\" data-list-style='square'>\n                <label>空心方块列表：</label>\n                <ul style=\"list-style-type: square;\">\n                  <li>________</li>\n                </ul>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__table\">\n          <i title=\"表格\"></i>\n        </div>\n        <div class=\"menu-item__table__collapse\">\n          <div class=\"table-close\">×</div>\n          <div class=\"table-title\">\n            <span class=\"table-select\">插入</span>\n            <span>表格</span>\n          </div>\n          <div class=\"table-panel\"></div>\n        </div>\n        <div class=\"menu-item__image\">\n          <i title=\"图片\"></i>\n          <input type=\"file\" id=\"image\" accept=\".png, .jpg, .jpeg, .svg, .gif\">\n        </div>\n        <div class=\"menu-item__hyperlink\">\n          <i title=\"超链接\"></i>\n        </div>\n        <div class=\"menu-item__separator\">\n          <i title=\"分割线\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-separator='0,0'>\n                <i></i>\n              </li>\n              <li data-separator=\"1,1\">\n                <i></i>\n              </li>\n              <li data-separator=\"3,1\">\n                <i></i>\n              </li>\n              <li data-separator=\"4,4\">\n                <i></i>\n              </li>\n              <li data-separator=\"7,3,3,3\">\n                <i></i>\n              </li>\n              <li data-separator=\"6,2,2,2,2,2\">\n                <i></i>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__watermark\">\n          <i title=\"水印(添加、删除)\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-menu=\"add\">添加水印</li>\n              <li data-menu=\"delete\">删除水印</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__codeblock\" title=\"代码块\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__page-break\" title=\"分页符\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__control\">\n          <i title=\"控件\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-control='text'>文本</li>\n              <li data-control=\"select\">列举</li>\n              <li data-control=\"checkbox\">复选框</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__checkbox\" title=\"复选框\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__latex\" title=\"LateX\">\n          <i></i>\n        </div>\n        <div class=\"menu-item__date\">\n          <i title=\"日期\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-format=\"yyyy-MM-dd\"></li>\n              <li data-format=\"yyyy-MM-dd hh:mm:ss\"></li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"menu-item__block\" title=\"内容块\">\n          <i></i>\n        </div>\n\n      </div>\n\n    </div>\n\n    <div :class=\"!!editId?'canvas'+editId + ' editor':'editor'\" id=\"canvas\"></div>\n    <div class=\"comment\" editor-component=\"comment\"></div>\n    <div class=\"footer\" editor-component=\"footer\">\n      <div>\n        <div class=\"catalog-mode\" title=\"目录\">\n          <i></i>\n        </div>\n        <div class=\"page-mode\">\n          <i title=\"页面模式(分页、连页)\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-page-mode=\"paging\" class=\"active\">分页</li>\n              <li data-page-mode=\"continuity\">连页</li>\n            </ul>\n          </div>\n        </div>\n        <span>可见页码：<span class=\"page-no-list\">1</span></span>\n        <span>页面：<span class=\"page-no\">1</span>/<span class=\"page-size\">1</span></span>\n        <span>字数：<span class=\"word-count\">0</span></span>\n      </div>\n      <div class=\"editor-mode\" title=\"编辑模式(编辑、清洁、只读、表单)\">编辑模式</div>\n      <div>\n        <div class=\"page-scale-minus\" title=\"缩小(Ctrl+-)\">\n          <i></i>\n        </div>\n        <span class=\"page-scale-percentage\" title=\"显示比例(点击可复原Ctrl+0)\">100%</span>\n        <div class=\"page-scale-add\" title=\"放大(Ctrl+=)\">\n          <i></i>\n        </div>\n        <div class=\"paper-size\">\n          <i title=\"纸张类型\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-paper-size=\"794*1123\" class=\"active\">A4</li>\n              <li data-paper-size=\"1593*2251\">A2</li>\n              <li data-paper-size=\"1125*1593\">A3</li>\n              <li data-paper-size=\"565*796\">A5</li>\n              <li data-paper-size=\"412*488\">5号信封</li>\n              <li data-paper-size=\"450*866\">6号信封</li>\n              <li data-paper-size=\"609*862\">7号信封</li>\n              <li data-paper-size=\"862*1221\">9号信封</li>\n              <li data-paper-size=\"813*1266\">法律用纸</li>\n              <li data-paper-size=\"813*1054\">信纸</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"paper-direction\">\n          <i title=\"纸张方向\"></i>\n          <div class=\"options\">\n            <ul>\n              <li data-paper-direction=\"vertical\" class=\"active\">纵向</li>\n              <li data-paper-direction=\"horizontal\">横向</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"paper-margin\" title=\"页边距\">\n          <i></i>\n        </div>\n        <div class=\"fullscreen\" title=\"全屏显示\">\n          <i></i>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n<script lang=\"ts\">\n  // import {\n  //   windowOnload,\n  //   containerExport,\n  //   recoveryTableFun,\n  //    instanceExport\n  // } from \"../CanvasEdit/main\"\n  import {\n    options\n  } from './mock'\n  interface IComment {\n    id: string\n    content: string\n    userName: string\n    rangeText: string\n    createdDate: string\n  }\n  let commentList: IComment[]\n  const elementList: IElement[] = []\n  export const data: IElement[] = elementList\n  import './style.css'\n  import prism from 'prismjs'\n  import Editor, {\n    BlockType,\n    Command,\n    ControlType,\n    EditorMode,\n    EditorZone,\n    ElementType,\n    IBlock,\n    ICatalogItem,\n    IElement,\n    KeyMap,\n    ListStyle,\n    ListType,\n    PageMode,\n    PaperDirection,\n    RowFlex,\n    TitleLevel\n  } from './editor'\n  import {\n    Dialog\n  } from './components/dialog/Dialog'\n  import {\n    formatPrismToken\n  } from './utils/prism'\n  import {\n    Signature\n  } from './components/signature/Signature'\n  import {\n    debounce,\n    nextTick,\n    scrollIntoView\n  } from './utils'\n  import {\n    formatElementList\n  } from './editor/utils/element'\n  let instanceExport: any;\n  let obj = {};\n  import Vue from 'vue';\n  export default Vue.extend({\n    components: {},\n    props: ['editId', 'content'],\n    data() {\n      return {\n        aa: ''\n      }\n    },\n    mounted() {\n      const isApple =\n        typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\n      // 1. 初始化编辑器\n      const container = document.querySelector < HTMLDivElement > ('.canvas' + this.editId) !\n\n        const instance = new Editor(\n          container, {\n            header: [],\n            main: < IElement[] > data,\n            footer: []\n          },\n          options\n        )\n      this.$emit(\"saveInstance\", instance)\n      obj = {\n        bgId: this.editId,\n        instance: instance\n      }\n      instanceExport = instance\n      console.log('实例: ', instance)\n      // cypress使用\n      Reflect.set(window, 'editor', instance)\n\n      // 菜单弹窗销毁\n      window.addEventListener(\n        'click',\n        evt => {\n          const visibleDom = document.querySelector('.visible')\n          if (!visibleDom || visibleDom.contains( < Node > evt.target)) return\n          visibleDom.classList.remove('visible')\n        }, {\n          capture: true\n        }\n      )\n\n      // 2. | 撤销 | 重做 | 格式刷 | 清除格式 |\n      const undoDom = document.querySelector < HTMLDivElement > ('.menu-item__undo') !\n        undoDom.title = `撤销(${isApple ? '⌘' : 'Ctrl'}+Z)`\n      undoDom.onclick = function () {\n        console.log('undo')\n        instance.command.executeUndo()\n      }\n\n      const redoDom = document.querySelector < HTMLDivElement > ('.menu-item__redo') !\n        redoDom.title = `重做(${isApple ? '⌘' : 'Ctrl'}+Y)`\n      redoDom.onclick = function () {\n        console.log('redo')\n        instance.command.executeRedo()\n      }\n\n      const painterDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__painter'\n        ) !\n        painterDom.onclick = function () {\n          console.log('painter')\n          instance.command.executePainter({\n            isDblclick: false\n          })\n        }\n      painterDom.ondblclick = function () {\n        console.log('painter')\n        instance.command.executePainter({\n          isDblclick: true\n        })\n      }\n\n      document.querySelector < HTMLDivElement > ('.menu-item__format') !.onclick =\n        function () {\n          console.log('format')\n          instance.command.executeFormat()\n        }\n\n      // 3. | 字体 | 字体变大 | 字体变小 | 加粗 | 斜体 | 下划线 | 删除线 | 上标 | 下标 | 字体颜色 | 背景色 |\n      const fontDom = document.querySelector < HTMLDivElement > ('.menu-item__font') !\n        const fontSelectDom = fontDom.querySelector < HTMLDivElement > ('.select') !\n          const fontOptionDom = fontDom.querySelector < HTMLDivElement > ('.options') !\n            fontDom.onclick = function () {\n              console.log('font')\n              fontOptionDom.classList.toggle('visible')\n            }\n      fontOptionDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        instance.command.executeFont(li.dataset.family!)\n      }\n\n      const sizeSetDom = document.querySelector < HTMLDivElement > ('.menu-item__size') !\n        const sizeSelectDom = sizeSetDom.querySelector < HTMLDivElement > ('.select') !\n          const sizeOptionDom = sizeSetDom.querySelector < HTMLDivElement > ('.options') !\n            sizeSetDom.title = `设置字号`\n      sizeSetDom.onclick = function () {\n        console.log('size')\n        sizeOptionDom.classList.toggle('visible')\n      }\n      sizeOptionDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        instance.command.executeSize(Number(li.dataset.size!))\n      }\n\n      const sizeAddDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__size-add'\n        ) !\n        sizeAddDom.title = `增大字号(${isApple ? '⌘' : 'Ctrl'}+[)`\n      sizeAddDom.onclick = function () {\n        console.log('size-add')\n        instance.command.executeSizeAdd()\n      }\n\n      const sizeMinusDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__size-minus'\n        ) !\n        sizeMinusDom.title = `减小字号(${isApple ? '⌘' : 'Ctrl'}+])`\n      sizeMinusDom.onclick = function () {\n        console.log('size-minus')\n        instance.command.executeSizeMinus()\n      }\n\n      const boldDom = document.querySelector < HTMLDivElement > ('.menu-item__bold') !\n        boldDom.title = `加粗(${isApple ? '⌘' : 'Ctrl'}+B)`\n      boldDom.onclick = function () {\n        console.log('bold')\n        instance.command.executeBold()\n      }\n\n      const italicDom =\n        document.querySelector < HTMLDivElement > ('.menu-item__italic') !\n        italicDom.title = `斜体(${isApple ? '⌘' : 'Ctrl'}+I)`\n      italicDom.onclick = function () {\n        console.log('italic')\n        instance.command.executeItalic()\n      }\n\n      const underlineDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__underline'\n        ) !\n        underlineDom.title = `下划线(${isApple ? '⌘' : 'Ctrl'}+U)`\n      underlineDom.onclick = function () {\n        console.log('underline')\n        instance.command.executeUnderline()\n      }\n\n      const strikeoutDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__strikeout'\n        ) !\n        strikeoutDom.onclick = function () {\n          console.log('strikeout')\n          instance.command.executeStrikeout()\n        }\n\n      const superscriptDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__superscript'\n        ) !\n        superscriptDom.title = `上标(${isApple ? '⌘' : 'Ctrl'}+Shift+,)`\n      superscriptDom.onclick = function () {\n        console.log('superscript')\n        instance.command.executeSuperscript()\n      }\n\n      const subscriptDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__subscript'\n        ) !\n        subscriptDom.title = `下标(${isApple ? '⌘' : 'Ctrl'}+Shift+.)`\n      subscriptDom.onclick = function () {\n        console.log('subscript')\n        instance.command.executeSubscript()\n      }\n\n      const colorControlDom = document.querySelector < HTMLInputElement > ('#color') !\n        colorControlDom.oninput = function () {\n          instance.command.executeColor(colorControlDom.value)\n        }\n      const colorDom = document.querySelector < HTMLDivElement > ('.menu-item__color') !\n        const colorSpanDom = colorDom.querySelector('span') !\n          colorDom.onclick = function () {\n            console.log('color')\n            colorControlDom.click()\n          }\n\n      const highlightControlDom =\n        document.querySelector < HTMLInputElement > ('#highlight') !\n        highlightControlDom.oninput = function () {\n          instance.command.executeHighlight(highlightControlDom.value)\n        }\n      const highlightDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__highlight'\n        ) !\n        const highlightSpanDom = highlightDom.querySelector('span') !\n          highlightDom.onclick = function () {\n            console.log('highlight')\n            highlightControlDom.click()\n          }\n\n      const titleDom = document.querySelector < HTMLDivElement > ('.menu-item__title') !\n        const titleSelectDom = titleDom.querySelector < HTMLDivElement > ('.select') !\n          const titleOptionDom = titleDom.querySelector < HTMLDivElement > ('.options') !\n            titleOptionDom.querySelectorAll('li').forEach((li, index) => {\n              li.title = `Ctrl+${isApple ? 'Option' : 'Alt'}+${index}`\n            })\n\n      titleDom.onclick = function () {\n        console.log('title')\n        titleOptionDom.classList.toggle('visible')\n      }\n      titleOptionDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        const level = < TitleLevel > li.dataset.level\n        instance.command.executeTitle(level || null)\n      }\n\n      const leftDom = document.querySelector < HTMLDivElement > ('.menu-item__left') !\n        leftDom.title = `左对齐(${isApple ? '⌘' : 'Ctrl'}+L)`\n      leftDom.onclick = function () {\n        console.log('left')\n        instance.command.executeRowFlex(RowFlex.LEFT)\n      }\n\n      const centerDom =\n        document.querySelector < HTMLDivElement > ('.menu-item__center') !\n        centerDom.title = `居中对齐(${isApple ? '⌘' : 'Ctrl'}+E)`\n      centerDom.onclick = function () {\n        console.log('center')\n        instance.command.executeRowFlex(RowFlex.CENTER)\n      }\n\n      const rightDom = document.querySelector < HTMLDivElement > ('.menu-item__right') !\n        rightDom.title = `右对齐(${isApple ? '⌘' : 'Ctrl'}+R)`\n      rightDom.onclick = function () {\n        console.log('right')\n        instance.command.executeRowFlex(RowFlex.RIGHT)\n      }\n\n      const alignmentDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__alignment'\n        ) !\n        alignmentDom.title = `两端对齐(${isApple ? '⌘' : 'Ctrl'}+J)`\n      alignmentDom.onclick = function () {\n        console.log('alignment')\n        instance.command.executeRowFlex(RowFlex.ALIGNMENT)\n      }\n\n      const rowMarginDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__row-margin'\n        ) !\n        const rowOptionDom = rowMarginDom.querySelector < HTMLDivElement > ('.options') !\n          rowMarginDom.onclick = function () {\n            console.log('row-margin')\n            rowOptionDom.classList.toggle('visible')\n          }\n      rowOptionDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        instance.command.executeRowMargin(Number(li.dataset.rowmargin!))\n      }\n\n      const listDom = document.querySelector < HTMLDivElement > ('.menu-item__list') !\n        listDom.title = `列表(${isApple ? '⌘' : 'Ctrl'}+Shift+U)`\n      const listOptionDom = listDom.querySelector < HTMLDivElement > ('.options') !\n        listDom.onclick = function () {\n          console.log('list')\n          listOptionDom.classList.toggle('visible')\n        }\n      listOptionDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        const listType = < ListType > li.dataset.listType || null\n        const listStyle = < ListStyle > ( < unknown > li.dataset.listStyle)\n        instance.command.executeList(listType, listStyle)\n      }\n\n      // 4. | 表格 | 图片 | 超链接 | 分割线 | 水印 | 代码块 | 分隔符 | 控件 | 复选框 | LaTeX | 日期选择器\n      const tableDom = document.querySelector < HTMLDivElement > ('.menu-item__table') !\n        const tablePanelContainer = document.querySelector < HTMLDivElement > (\n            '.menu-item__table__collapse'\n          ) !\n          const tableClose = document.querySelector < HTMLDivElement > ('.table-close') !\n            const tableTitle = document.querySelector < HTMLDivElement > ('.table-select') !\n              const tablePanel = document.querySelector < HTMLDivElement > ('.table-panel') !\n                // 绘制行列\n\n                const tableCellList: HTMLDivElement[][] = []\n      for (let i = 0; i < 10; i++) {\n        const tr = document.createElement('tr')\n        tr.classList.add('table-row')\n        const trCellList: HTMLDivElement[] = []\n        for (let j = 0; j < 10; j++) {\n          const td = document.createElement('td')\n          td.classList.add('table-cel')\n          tr.append(td)\n          trCellList.push(td)\n        }\n        tablePanel.append(tr)\n        tableCellList.push(trCellList)\n      }\n\n      let colIndex = 0\n      let rowIndex = 0\n      // 移除所有格选择\n      function removeAllTableCellSelect() {\n        tableCellList.forEach(tr => {\n          tr.forEach(td => td.classList.remove('active'))\n        })\n      }\n      // 设置标题内容\n      function setTableTitle(payload: string) {\n        tableTitle.innerText = payload\n      }\n      // 恢复初始状态\n      function recoveryTable() {\n        // 还原选择样式、标题、选择行列\n        removeAllTableCellSelect()\n        setTableTitle('插入')\n        colIndex = 0\n        rowIndex = 0\n        // 隐藏panel\n        tablePanelContainer.style.display = 'none'\n      }\n      tableDom.onclick = function () {\n        console.log('table')\n        tablePanelContainer!.style.display = 'block'\n      }\n      tablePanel.onmousemove = function (evt) {\n        const celSize = 16\n        const rowMarginTop = 10\n        const celMarginRight = 6\n        const {\n          offsetX,\n          offsetY\n        } = evt\n        // 移除所有选择\n        removeAllTableCellSelect()\n        colIndex = Math.ceil(offsetX / (celSize + celMarginRight)) || 1\n        rowIndex = Math.ceil(offsetY / (celSize + rowMarginTop)) || 1\n        // 改变选择样式\n        tableCellList.forEach((tr, trIndex) => {\n          tr.forEach((td, tdIndex) => {\n            if (tdIndex < colIndex && trIndex < rowIndex) {\n              td.classList.add('active')\n            }\n          })\n        })\n        // 改变表格标题\n        setTableTitle(`${rowIndex}×${colIndex}`)\n      }\n      tableClose.onclick = function () {\n        recoveryTable()\n      }\n      tablePanel.onclick = function () {\n        // 应用选择\n        console.log(\"sds\")\n        instance.command.executeInsertTable(rowIndex, colIndex, [], '', '')\n        recoveryTable()\n      }\n\n      const imageDom = document.querySelector < HTMLDivElement > ('.menu-item__image') !\n        const imageFileDom = document.querySelector < HTMLInputElement > ('#image') !\n          imageDom.onclick = function () {\n            imageFileDom.click()\n          }\n      imageFileDom.onchange = function () {\n        const file = imageFileDom.files![0] !\n          const fileReader = new FileReader()\n        fileReader.readAsDataURL(file)\n        fileReader.onload = function () {\n          // 计算宽高\n          const image = new Image()\n          const value = fileReader.result as string\n          image.src = value\n          image.onload = function () {\n            instance.command.executeImage({\n              value,\n              width: image.width,\n              height: image.height\n            })\n            imageFileDom.value = ''\n          }\n        }\n      }\n\n      const hyperlinkDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__hyperlink'\n        ) !\n        hyperlinkDom.onclick = function () {\n          console.log('hyperlink')\n          new Dialog({\n            title: '超链接',\n            data: [{\n                type: 'text',\n                label: '文本',\n                name: 'name',\n                required: true,\n                placeholder: '请输入文本'\n              },\n              {\n                type: 'text',\n                label: '链接',\n                name: 'url',\n                required: true,\n                placeholder: '请输入链接'\n              }\n            ],\n            onConfirm: payload => {\n              let name1 = payload.find(p => p.name === 'name')\n              const name = !!name1 ? name1.value : null\n              if (!name) return\n              let url1 = payload.find(p => p.name === 'url')\n              const url = !!url1 ? url1.value : null\n              if (!url) return\n              instance.command.executeHyperlink({\n                type: ElementType.HYPERLINK,\n                value: '',\n                url,\n                valueList: name.split('').map(n => ({\n                  value: n,\n                  size: 16\n                }))\n              })\n            }\n          })\n        }\n\n      const separatorDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__separator'\n        ) !\n        const separatorOptionDom =\n          separatorDom.querySelector < HTMLDivElement > ('.options') !\n          separatorDom.onclick = function () {\n            console.log('separator')\n            separatorOptionDom.classList.toggle('visible')\n          }\n      separatorOptionDom.onmousedown = function (evt) {\n        let payload: number[] = []\n        const li = evt.target as HTMLLIElement\n        const separatorDash = li.dataset.separator ? li.dataset.separator.split(',').map(Number) : null\n        if (separatorDash) {\n          const isSingleLine = separatorDash.every(d => d === 0)\n          if (!isSingleLine) {\n            payload = separatorDash\n          }\n        }\n        instance.command.executeSeparator(payload)\n      }\n\n      const pageBreakDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__page-break'\n        ) !\n        pageBreakDom.onclick = function () {\n          console.log('pageBreak')\n          instance.command.executePageBreak()\n        }\n\n      const watermarkDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__watermark'\n        ) !\n        const watermarkOptionDom =\n          watermarkDom.querySelector < HTMLDivElement > ('.options') !\n          watermarkDom.onclick = function () {\n            console.log('watermark')\n            watermarkOptionDom.classList.toggle('visible')\n          }\n      watermarkOptionDom.onmousedown = function (evt) {\n        const li = evt.target as HTMLLIElement\n        const menu = li.dataset.menu!\n          watermarkOptionDom.classList.toggle('visible')\n        if (menu === 'add') {\n          new Dialog({\n            title: '水印',\n            data: [{\n                type: 'text',\n                label: '内容',\n                name: 'data',\n                required: true,\n                placeholder: '请输入内容'\n              },\n              {\n                type: 'color',\n                label: '颜色',\n                name: 'color',\n                required: true,\n                value: '#AEB5C0'\n              },\n              {\n                type: 'number',\n                label: '字体大小',\n                name: 'size',\n                required: true,\n                value: '120'\n              }\n            ],\n            onConfirm: payload => {\n              const nullableIndex = payload.findIndex(p => !p.value)\n              if (~nullableIndex) return\n              const watermark = payload.reduce((pre, cur) => {\n                pre[cur.name] = cur.value\n                return pre\n              }, < any > {})\n              instance.command.executeAddWatermark({\n                data: watermark.data,\n                color: watermark.color,\n                size: Number(watermark.size)\n              })\n            }\n          })\n        } else {\n          instance.command.executeDeleteWatermark()\n        }\n      }\n\n      const codeblockDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__codeblock'\n        ) !\n        codeblockDom.onclick = function () {\n          console.log('codeblock')\n          new Dialog({\n            title: '代码块',\n            data: [{\n              type: 'textarea',\n              name: 'codeblock',\n              placeholder: '请输入代码',\n              width: 500,\n              height: 300\n            }],\n            onConfirm: payload => {\n              let codeblock1 = payload.find(p => p.name === 'codeblock')\n              const codeblock = !!codeblock1 ? codeblock1.value : null\n              if (!codeblock) return\n              const tokenList = prism.tokenize(codeblock, prism.languages.javascript)\n              const formatTokenList = formatPrismToken(tokenList)\n              const elementList: IElement[] = []\n              for (let i = 0; i < formatTokenList.length; i++) {\n                const formatToken = formatTokenList[i]\n                const tokenStringList = formatToken.content.split('')\n                for (let j = 0; j < tokenStringList.length; j++) {\n                  const value = tokenStringList[j]\n                  const element: IElement = {\n                    value\n                  }\n                  if (formatToken.color) {\n                    element.color = formatToken.color\n                  }\n                  if (formatToken.bold) {\n                    element.bold = true\n                  }\n                  if (formatToken.italic) {\n                    element.italic = true\n                  }\n                  elementList.push(element)\n                }\n              }\n              elementList.unshift({\n                value: '\\n'\n              })\n              instance.command.executeInsertElementList(elementList)\n            }\n          })\n        }\n\n      const controlDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__control'\n        ) !\n        const controlOptionDom = controlDom.querySelector < HTMLDivElement > ('.options') !\n          controlDom.onclick = function () {\n            console.log('control')\n            controlOptionDom.classList.toggle('visible')\n          }\n      controlOptionDom.onmousedown = function (evt) {\n        controlOptionDom.classList.toggle('visible')\n        const li = evt.target as HTMLLIElement\n        const type = < ControlType > li.dataset.control\n        switch (type) {\n          case ControlType.TEXT:\n            new Dialog({\n              title: '文本控件',\n              data: [{\n                  type: 'text',\n                  label: '绑定字段',\n                  name: 'zd',\n                  required: true,\n                  placeholder: '请输入绑定字段'\n                },\n                {\n                  type: 'text',\n                  label: '字段名称',\n                  name: 'zdMc',\n                  required: true,\n                  placeholder: '请输入字段名称'\n                },\n                {\n                  type: 'text',\n                  label: '占位符',\n                  name: 'placeholder',\n                  required: true,\n                  placeholder: '请输入占位符'\n                },\n                {\n                  type: 'text',\n                  label: '默认值',\n                  name: 'value',\n                  placeholder: '请输入默认值'\n                }\n              ],\n              onConfirm: payload => {\n                let placeholder1 = payload.find(\n                  p => p.name === 'placeholder'\n                )\n                const placeholder = !!placeholder1 ? placeholder1.value : null\n                if (!placeholder) return\n                let value1 = payload.find(p => p.name === 'value')\n                const value = !!value1 ? value1.value : ''\n                let labelName1 = payload.find(p => p.name === 'zdMc')\n                const labelName = !!labelName1 ? labelName1.value : ''\n                let labelZd1 = payload.find(p => p.name === 'zd')\n                const labelZd = !!labelZd1 ? labelZd1.value : ''\n                instance.command.executeInsertElementList([{\n                  type: ElementType.CONTROL,\n                  value: '',\n                  control: {\n                    type,\n                    value: value ? [{\n                      value\n                    }] : null,\n                    placeholder,\n                    labelName,\n                    labelZd\n                  }\n                }])\n              }\n            })\n            break\n          case ControlType.SELECT:\n            new Dialog({\n              title: '列举控件',\n              data: [{\n                  type: 'text',\n                  label: '绑定字段',\n                  name: 'zd',\n                  required: true,\n                  placeholder: '请输入绑定字段'\n                },\n                {\n                  type: 'text',\n                  label: '字段名称',\n                  name: 'zdMc',\n                  required: true,\n                  placeholder: '请输入字段名称'\n                },\n                {\n                  type: 'text',\n                  label: '占位符',\n                  name: 'placeholder',\n                  required: true,\n                  placeholder: '请输入占位符'\n                },\n                {\n                  type: 'text',\n                  label: '默认值',\n                  name: 'code',\n                  placeholder: '请输入默认值'\n                },\n                {\n                  type: 'textarea',\n                  label: '值集',\n                  name: 'valueSets',\n                  required: true,\n                  height: 100,\n                  placeholder: `请输入值集JSON，例：\\n[{\\n\"value\":\"有\",\\n\"code\":\"98175\"\\n}]`\n                }\n              ],\n              onConfirm: payload => {\n                // console.log(Vue.prototype)\n                // Vue.prototype.$message.warningAlert(\"提示\", '提示信息')\n                let placeholder1 = payload.find(\n                  p => p.name === 'placeholder'\n                )\n                const placeholder = !!placeholder1 ? placeholder1.value : ''\n                if (!placeholder) return\n                let valueSets1 = payload.find(p => p.name === 'valueSets')\n                const valueSets = !!valueSets1 ? valueSets1.value : ''\n                if (!valueSets) return\n                let code1 = payload.find(p => p.name === 'code')\n                const code = !!code1 ? code1.value : ''\n                let labelName1 = payload.find(p => p.name === 'zdMc')\n                const labelName = !!labelName1 ? labelName1.value : ''\n                let labelZd1 = payload.find(p => p.name === 'zd')\n                const labelZd = !!labelZd1 ? labelZd1.value : ''\n                instance.command.executeInsertElementList([{\n                  type: ElementType.CONTROL,\n                  value: '',\n                  control: {\n                    type,\n                    code,\n                    labelName,\n                    labelZd,\n                    value: null,\n                    placeholder,\n                    valueSets: JSON.parse(valueSets)\n                    // valueSets: JSON.parse(valueSets)\n\n                  }\n                }])\n              }\n            })\n            break\n          case ControlType.CHECKBOX:\n            new Dialog({\n              title: '复选框控件',\n              data: [{\n                  type: 'text',\n                  label: '默认值',\n                  name: 'code',\n                  placeholder: '请输入默认值，多个值以英文逗号分割'\n                },\n                {\n                  type: 'textarea',\n                  label: '值集',\n                  name: 'valueSets',\n                  required: true,\n                  height: 100,\n                  placeholder: `请输入值集JSON，例：\\n[{\\n\"value\":\"有\",\\n\"code\":\"98175\"\\n}]`\n                }\n              ],\n              onConfirm: payload => {\n                let valueSets1 = payload.find(p => p.name === 'valueSets')\n                const valueSets = !!valueSets1 ? valueSets1.value : ''\n                if (!valueSets) return\n                let code1 = payload.find(p => p.name === 'code')\n                const code = !!code1 ? code1.value : ''\n                instance.command.executeInsertElementList([{\n                  type: ElementType.CONTROL,\n                  value: '',\n                  control: {\n                    type,\n                    code,\n                    value: null,\n                    valueSets: JSON.parse(valueSets)\n                  }\n                }])\n              }\n            })\n            break\n          default:\n            break\n        }\n      }\n\n      const checkboxDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__checkbox'\n        ) !\n        checkboxDom.onclick = function () {\n          console.log('checkbox', instance.command.getHTML().main)\n          instance.command.executeInsertElementList([{\n            type: ElementType.CHECKBOX,\n            value: ''\n          }])\n        }\n\n      const latexDom = document.querySelector < HTMLDivElement > ('.menu-item__latex') !\n        latexDom.onclick = function () {\n          console.log('LaTeX')\n          new Dialog({\n            title: 'LaTeX',\n            data: [{\n              type: 'textarea',\n              height: 100,\n              name: 'value',\n              placeholder: '请输入LaTeX文本'\n            }],\n            onConfirm: payload => {\n              let value1 = payload.find(p => p.name === 'value')\n              const value = !!value1 ? value1.value : ''\n              if (!value) return\n              instance.command.executeInsertElementList([{\n                type: ElementType.LATEX,\n                value\n              }])\n            }\n          })\n        }\n\n      const dateDom = document.querySelector < HTMLDivElement > ('.menu-item__date') !\n        const dateDomOptionDom = dateDom.querySelector < HTMLDivElement > ('.options') !\n          dateDom.onclick = function () {\n            console.log('date')\n            dateDomOptionDom.classList.toggle('visible')\n            // 定位调整\n            const bodyRect = document.body.getBoundingClientRect()\n            const dateDomOptionRect = dateDomOptionDom.getBoundingClientRect()\n            if (dateDomOptionRect.left + dateDomOptionRect.width > bodyRect.width) {\n              dateDomOptionDom.style.right = '0px'\n              dateDomOptionDom.style.left = 'unset'\n            } else {\n              dateDomOptionDom.style.right = 'unset'\n              dateDomOptionDom.style.left = '0px'\n            }\n            // 当前日期\n            const date = new Date()\n            const year = date.getFullYear().toString()\n            const month = (date.getMonth() + 1).toString().padStart(2, '0')\n            const day = date.getDate().toString().padStart(2, '0')\n            const hour = date.getHours().toString().padStart(2, '0')\n            const minute = date.getMinutes().toString().padStart(2, '0')\n            const second = date.getSeconds().toString().padStart(2, '0')\n            const dateString = `${year}-${month}-${day}`\n            const dateTimeString = `${dateString} ${hour}:${minute}:${second}`\n            dateDomOptionDom.querySelector < HTMLLIElement > ('li:first-child') !.innerText =\n              dateString\n            dateDomOptionDom.querySelector < HTMLLIElement > ('li:last-child') !.innerText =\n              dateTimeString\n          }\n      dateDomOptionDom.onmousedown = function (evt) {\n        debugger\n        const li = evt.target as HTMLLIElement\n        const dateFormat = li.dataset.format!\n          dateDomOptionDom.classList.toggle('visible')\n        instance.command.executeInsertElementList([{\n          type: ElementType.DATE,\n          value: '',\n          dateFormat,\n          valueList: [{\n            value: li.innerText.trim()\n          }]\n        }])\n      }\n\n      const blockDom = document.querySelector < HTMLDivElement > ('.menu-item__block') !\n        blockDom.onclick = function () {\n          console.log('block')\n          new Dialog({\n            title: '内容块',\n            data: [{\n                type: 'select',\n                label: '类型',\n                name: 'type',\n                value: 'iframe',\n                required: true,\n                options: [{\n                    label: '网址',\n                    value: 'iframe'\n                  },\n                  {\n                    label: '视频',\n                    value: 'video'\n                  }\n                ]\n              },\n              {\n                type: 'number',\n                label: '宽度',\n                name: 'width',\n                placeholder: '请输入宽度（默认页面内宽度）'\n              },\n              {\n                type: 'number',\n                label: '高度',\n                name: 'height',\n                required: true,\n                placeholder: '请输入高度'\n              },\n              {\n                type: 'textarea',\n                label: '地址',\n                height: 100,\n                name: 'value',\n                required: true,\n                placeholder: '请输入地址'\n              }\n            ],\n            onConfirm: payload => {\n              let type1 = payload.find(p => p.name === 'type')\n              const type = !!type1 ? type1.value : ''\n              if (!type) return\n              let value1 = payload.find(p => p.name === 'value')\n              const value = !!value1 ? value1.value : ''\n              if (!value) return\n              let width1 = payload.find(p => p.name === 'width')\n              const width = !!width1 ? width1.value : ''\n              let height1 = payload.find(p => p.name === 'height')\n              const height = !!height1 ? height1.value : ''\n              if (!height) return\n              const block: IBlock = {\n                type: < BlockType > type\n              }\n              if (block.type === BlockType.IFRAME) {\n                block.iframeBlock = {\n                  src: value\n                }\n              } else if (block.type === BlockType.VIDEO) {\n                block.videoBlock = {\n                  src: value\n                }\n              }\n              const blockElement: IElement = {\n                type: ElementType.BLOCK,\n                value: '',\n                height: Number(height),\n                block\n              }\n              if (width) {\n                blockElement.width = Number(width)\n              }\n              instance.command.executeInsertElementList([blockElement])\n            }\n          })\n        }\n\n      // 5. | 搜索&替换 | 打印 |\n      const searchCollapseDom = document.querySelector < HTMLDivElement > (\n          '.menu-item__search__collapse'\n        ) !\n        const searchInputDom = document.querySelector < HTMLInputElement > (\n            '.menu-item__search__collapse__search input'\n          ) !\n          const replaceInputDom = document.querySelector < HTMLInputElement > (\n              '.menu-item__search__collapse__replace input'\n            ) !\n            const searchDom =\n              document.querySelector < HTMLDivElement > ('.menu-item__search') !\n              searchDom.title = `搜索与替换(${isApple ? '⌘' : 'Ctrl'}+F)`\n      const searchResultDom =\n        searchCollapseDom.querySelector < HTMLLabelElement > ('.search-result') !\n        function setSearchResult() {\n          const result = instance.command.getSearchNavigateInfo()\n          if (result) {\n            const {\n              index,\n              count\n            } = result\n            searchResultDom.innerText = `${index}/${count}`\n          } else {\n            searchResultDom.innerText = ''\n          }\n        }\n      searchDom.onclick = function () {\n        console.log('search')\n        searchCollapseDom.style.display = 'block'\n        const bodyRect = document.body.getBoundingClientRect()\n        const searchRect = searchDom.getBoundingClientRect()\n        const searchCollapseRect = searchCollapseDom.getBoundingClientRect()\n        if (searchRect.left + searchCollapseRect.width > bodyRect.width) {\n          searchCollapseDom.style.right = '0px'\n          searchCollapseDom.style.left = 'unset'\n        } else {\n          searchCollapseDom.style.right = 'unset'\n        }\n        searchInputDom.focus()\n      }\n      searchCollapseDom.querySelector < HTMLSpanElement > ('span') !.onclick =\n        function () {\n          searchCollapseDom.style.display = 'none'\n          searchInputDom.value = ''\n          replaceInputDom.value = ''\n          instance.command.executeSearch(null)\n          setSearchResult()\n        }\n      searchInputDom.oninput = function () {\n        instance.command.executeSearch(searchInputDom.value || null)\n        setSearchResult()\n      }\n      searchInputDom.onkeydown = function (evt) {\n        if (evt.key === 'Enter') {\n          instance.command.executeSearch(searchInputDom.value || null)\n          setSearchResult()\n        }\n      }\n      searchCollapseDom.querySelector < HTMLButtonElement > ('button') !.onclick =\n        function () {\n          const searchValue = searchInputDom.value\n          const replaceValue = replaceInputDom.value\n          if (searchValue && replaceValue && searchValue !== replaceValue) {\n            instance.command.executeReplace(replaceValue)\n          }\n        }\n      searchCollapseDom.querySelector < HTMLDivElement > ('.arrow-left') !.onclick =\n        function () {\n          instance.command.executeSearchNavigatePre()\n          setSearchResult()\n        }\n      searchCollapseDom.querySelector < HTMLDivElement > ('.arrow-right') !.onclick =\n        function () {\n          instance.command.executeSearchNavigateNext()\n          setSearchResult()\n        }\n\n      const printDom = document.querySelector < HTMLDivElement > ('.menu-item__print') !\n        printDom.title = `打印(${isApple ? '⌘' : 'Ctrl'}+P)`\n      printDom.onclick = function () {\n        console.log('print')\n        instance.command.executePrint()\n      }\n\n      // 6. 目录显隐 | 页面模式 | 纸张缩放 | 纸张大小 | 纸张方向 | 页边距 | 全屏\n      async function updateCatalog() {\n        const catalog = await instance.command.getCatalog()\n        const catalogMainDom =\n          document.querySelector < HTMLDivElement > ('.catalog__main') !\n          catalogMainDom.innerHTML = ''\n        if (catalog) {\n          const appendCatalog = (\n            parent: HTMLDivElement,\n            catalogItems: ICatalogItem[]\n          ) => {\n            for (let c = 0; c < catalogItems.length; c++) {\n              const catalogItem = catalogItems[c]\n              const catalogItemDom = document.createElement('div')\n              catalogItemDom.classList.add('catalog-item')\n              // 渲染\n              const catalogItemContentDom = document.createElement('div')\n              catalogItemContentDom.classList.add('catalog-item__content')\n              const catalogItemContentSpanDom = document.createElement('span')\n              catalogItemContentSpanDom.innerText = catalogItem.name\n              catalogItemContentDom.append(catalogItemContentSpanDom)\n              // 定位\n              catalogItemContentDom.onclick = () => {\n                instance.command.executeLocationCatalog(catalogItem.id)\n              }\n              catalogItemDom.append(catalogItemContentDom)\n              if (catalogItem.subCatalog && catalogItem.subCatalog.length) {\n                appendCatalog(catalogItemDom, catalogItem.subCatalog)\n              }\n              // 追加\n              parent.append(catalogItemDom)\n            }\n          }\n          appendCatalog(catalogMainDom, catalog)\n        }\n      }\n      let isCatalogShow = true\n      const catalogDom = document.querySelector < HTMLElement > ('.catalog') !\n        const catalogModeDom =\n          document.querySelector < HTMLDivElement > ('.catalog-mode') !\n          const catalogHeaderCloseDom = document.querySelector < HTMLDivElement > (\n              '.catalog__header__close'\n            ) !\n            const switchCatalog = () => {\n              isCatalogShow = !isCatalogShow\n              if (isCatalogShow) {\n                catalogDom.style.display = 'block'\n                updateCatalog()\n              } else {\n                catalogDom.style.display = 'none'\n              }\n            }\n      catalogModeDom.onclick = switchCatalog\n      // catalogHeaderCloseDom.onclick = switchCatalog\n\n      const pageModeDom = document.querySelector < HTMLDivElement > ('.page-mode') !\n        const pageModeOptionsDom =\n          pageModeDom.querySelector < HTMLDivElement > ('.options') !\n          pageModeDom.onclick = function () {\n            pageModeOptionsDom.classList.toggle('visible')\n          }\n      pageModeOptionsDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        instance.command.executePageMode( < PageMode > li.dataset.pageMode!)\n      }\n\n      document.querySelector < HTMLDivElement > ('.page-scale-percentage') !.onclick =\n        function () {\n          console.log('page-scale-recovery')\n          instance.command.executePageScaleRecovery()\n        }\n\n      document.querySelector < HTMLDivElement > ('.page-scale-minus') !.onclick =\n        function () {\n          console.log('page-scale-minus')\n          instance.command.executePageScaleMinus()\n        }\n\n      document.querySelector < HTMLDivElement > ('.page-scale-add') !.onclick =\n        function () {\n          console.log('page-scale-add')\n          instance.command.executePageScaleAdd()\n        }\n\n      // 纸张大小\n      const paperSizeDom = document.querySelector < HTMLDivElement > ('.paper-size') !\n        const paperSizeDomOptionsDom =\n          paperSizeDom.querySelector < HTMLDivElement > ('.options') !\n          paperSizeDom.onclick = function () {\n            paperSizeDomOptionsDom.classList.toggle('visible')\n          }\n      paperSizeDomOptionsDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        const paperType = li.dataset.paperSize!\n          const [width, height] = paperType.split('*').map(Number)\n        instance.command.executePaperSize(width, height)\n        // 纸张状态回显\n        paperSizeDomOptionsDom\n          .querySelectorAll('li')\n          .forEach(child => child.classList.remove('active'))\n        li.classList.add('active')\n      }\n\n      // 纸张方向\n      const paperDirectionDom =\n        document.querySelector < HTMLDivElement > ('.paper-direction') !\n        const paperDirectionDomOptionsDom =\n          paperDirectionDom.querySelector < HTMLDivElement > ('.options') !\n          paperDirectionDom.onclick = function () {\n            paperDirectionDomOptionsDom.classList.toggle('visible')\n          }\n      paperDirectionDomOptionsDom.onclick = function (evt) {\n        const li = evt.target as HTMLLIElement\n        const paperDirection = li.dataset.paperDirection!\n          instance.command.executePaperDirection( < PaperDirection > paperDirection)\n        // 纸张方向状态回显\n        paperDirectionDomOptionsDom\n          .querySelectorAll('li')\n          .forEach(child => child.classList.remove('active'))\n        li.classList.add('active')\n      }\n\n      // 页面边距\n      const paperMarginDom =\n        document.querySelector < HTMLDivElement > ('.paper-margin') !\n        paperMarginDom.onclick = function () {\n          const [topMargin, rightMargin, bottomMargin, leftMargin] =\n          instance.command.getPaperMargin()\n          new Dialog({\n            title: '页边距',\n            data: [{\n                type: 'text',\n                label: '上边距',\n                name: 'top',\n                required: true,\n                value: `${topMargin}`,\n                placeholder: '请输入上边距'\n              },\n              {\n                type: 'text',\n                label: '下边距',\n                name: 'bottom',\n                required: true,\n                value: `${bottomMargin}`,\n                placeholder: '请输入下边距'\n              },\n              {\n                type: 'text',\n                label: '左边距',\n                name: 'left',\n                required: true,\n                value: `${leftMargin}`,\n                placeholder: '请输入左边距'\n              },\n              {\n                type: 'text',\n                label: '右边距',\n                name: 'right',\n                required: true,\n                value: `${rightMargin}`,\n                placeholder: '请输入右边距'\n              }\n            ],\n            onConfirm: payload => {\n              let top1 = payload.find(p => p.name === 'top')\n              const top = !!top1 ? top1.value : null\n              if (!top) return\n              let bottom1 = payload.find(p => p.name === 'bottom')\n              const bottom = !!bottom1 ? bottom1.value : null\n              if (!bottom) return\n              let left1 = payload.find(p => p.name === 'left')\n              const left = !!left1 ? left1.value : null\n              if (!left) return\n              let right1 = payload.find(p => p.name === 'right')\n              const right = !!right1 ? right1.value : null\n              if (!right) return\n              instance.command.executeSetPaperMargin([\n                Number(top),\n                Number(right),\n                Number(bottom),\n                Number(left)\n              ])\n            }\n          })\n        }\n\n      // 全屏\n      const fullscreenDom = document.querySelector < HTMLDivElement > ('.fullscreen') !\n        fullscreenDom.onclick = toggleFullscreen\n      window.addEventListener('keydown', evt => {\n        if (evt.key === 'F11') {\n          toggleFullscreen()\n          evt.preventDefault()\n        }\n      })\n      document.addEventListener('fullscreenchange', () => {\n        fullscreenDom.classList.toggle('exist')\n      })\n\n      function toggleFullscreen() {\n        console.log('fullscreen')\n        if (!document.fullscreenElement) {\n          document.documentElement.requestFullscreen()\n        } else {\n          document.exitFullscreen()\n        }\n      }\n\n      // 7. 编辑器使用模式\n      let modeIndex = 0\n      const modeList = [{\n          mode: EditorMode.EDIT,\n          name: '编辑模式'\n        },\n        {\n          mode: EditorMode.CLEAN,\n          name: '清洁模式'\n        },\n        {\n          mode: EditorMode.READONLY,\n          name: '只读模式'\n        },\n        {\n          mode: EditorMode.FORM,\n          name: '表单模式'\n        },\n        {\n          mode: EditorMode.PRINT,\n          name: '打印模式'\n        }\n      ]\n      const modeElement = document.querySelector < HTMLDivElement > ('.editor-mode') !\n        modeElement.onclick = function () {\n          // 模式选择循环\n          modeIndex === modeList.length - 1 ? (modeIndex = 0) : modeIndex++\n          // 设置模式\n          const {\n            name,\n            mode\n          } = modeList[modeIndex]\n          modeElement.innerText = name\n          instance.command.executeMode(mode)\n          // 设置菜单栏权限视觉反馈\n          const isReadonly = mode === EditorMode.READONLY\n          const enableMenuList = ['search', 'print']\n          document.querySelectorAll < HTMLDivElement > ('.menu-item>div').forEach(dom => {\n            const menu = dom.dataset.menu\n            isReadonly && (!menu || !enableMenuList.includes(menu)) ?\n              dom.classList.add('disable') :\n              dom.classList.remove('disable')\n          })\n        }\n\n      // 模拟批注\n      const commentDom = document.querySelector < HTMLDivElement > ('.comment') !\n        async function updateComment() {\n          const groupIds = await instance.command.getGroupIds()\n          for (const comment of commentList) {\n            const activeCommentDom = commentDom.querySelector < HTMLDivElement > (\n              `.comment-item[data-id='${comment.id}']`\n            )\n            // 编辑器是否存在对应成组id\n            if (groupIds.includes(comment.id)) {\n              // 当前dom是否存在-不存在则追加\n              if (!activeCommentDom) {\n                const commentItem = document.createElement('div')\n                commentItem.classList.add('comment-item')\n                commentItem.setAttribute('data-id', comment.id)\n                commentItem.onclick = () => {\n                  instance.command.executeLocationGroup(comment.id)\n                }\n                commentDom.append(commentItem)\n                // 选区信息\n                const commentItemTitle = document.createElement('div')\n                commentItemTitle.classList.add('comment-item__title')\n                commentItemTitle.append(document.createElement('span'))\n                const commentItemTitleContent = document.createElement('span')\n                commentItemTitleContent.innerText = comment.rangeText\n                commentItemTitle.append(commentItemTitleContent)\n                const closeDom = document.createElement('i')\n                closeDom.onclick = () => {\n                  instance.command.executeDeleteGroup(comment.id)\n                }\n                commentItemTitle.append(closeDom)\n                commentItem.append(commentItemTitle)\n                // 基础信息\n                const commentItemInfo = document.createElement('div')\n                commentItemInfo.classList.add('comment-item__info')\n                const commentItemInfoName = document.createElement('span')\n                commentItemInfoName.innerText = comment.userName\n                const commentItemInfoDate = document.createElement('span')\n                commentItemInfoDate.innerText = comment.createdDate\n                commentItemInfo.append(commentItemInfoName)\n                commentItemInfo.append(commentItemInfoDate)\n                commentItem.append(commentItemInfo)\n                // 详细评论\n                const commentItemContent = document.createElement('div')\n                commentItemContent.classList.add('comment-item__content')\n                commentItemContent.innerText = comment.content\n                commentItem.append(commentItemContent)\n                commentDom.append(commentItem)\n              }\n            } else {\n              // 编辑器内不存在对应成组id则dom则移除\n              if (activeCommentDom) {\n                activeCommentDom.remove()\n              }\n            }\n          }\n        }\n      //   //  直接下载PDF\n      //   const canvasToPdf = document.querySelector<HTMLDivElement>('.canvas2pdf')!\n      //   canvasToPdf.onclick = function(){\n      //     // 获取Canvas元素\n      // var canvas = document.querySelector<HTMLDivElement>('#canvas canvas');\n\n      // // 创建一个新的jsPDF实例\n      // var pdf = new jsPDF();\n\n      // // 将Canvas转换为图像数据URL\n      // var canvasDataURL = canvas.toDataURL('image/jpeg', 1.0);\n\n      // // 将图像数据URL添加到PDF中\n      // pdf.addImage(canvasDataURL, 'JPEG', 0, 0, canvas.width, canvas.height);\n\n      // // 保存PDF文件\n      // pdf.save('canvas.pdf');\n      //   }\n      // 8. 内部事件监听\n      instance.listener.rangeStyleChange = function (payload) {\n        // 控件类型\n        payload.type === ElementType.SUBSCRIPT ?\n          subscriptDom.classList.add('active') :\n          subscriptDom.classList.remove('active')\n        payload.type === ElementType.SUPERSCRIPT ?\n          superscriptDom.classList.add('active') :\n          superscriptDom.classList.remove('active')\n        payload.type === ElementType.SEPARATOR ?\n          separatorDom.classList.add('active') :\n          separatorDom.classList.remove('active')\n        separatorOptionDom\n          .querySelectorAll('li')\n          .forEach(li => li.classList.remove('active'))\n        if (payload.type === ElementType.SEPARATOR) {\n          const separator = payload.dashArray.join(',') || '0,0'\n          const curSeparatorDom = separatorOptionDom.querySelector < HTMLLIElement > (\n              `[data-separator='${separator}']`\n            ) !\n            if (curSeparatorDom) {\n              curSeparatorDom.classList.add('active')\n            }\n        }\n\n        // 富文本\n        fontOptionDom\n          .querySelectorAll < HTMLLIElement > ('li')\n          .forEach(li => li.classList.remove('active'))\n        const curFontDom = fontOptionDom.querySelector < HTMLLIElement > (\n          `[data-family='${payload.font}']`\n        )\n        if (curFontDom) {\n          fontSelectDom.innerText = curFontDom.innerText\n          fontSelectDom.style.fontFamily = payload.font\n          curFontDom.classList.add('active')\n        }\n        sizeOptionDom\n          .querySelectorAll < HTMLLIElement > ('li')\n          .forEach(li => li.classList.remove('active'))\n        const curSizeDom = sizeOptionDom.querySelector < HTMLLIElement > (\n          `[data-size='${payload.size}']`\n        )\n        if (curSizeDom) {\n          sizeSelectDom.innerText = curSizeDom.innerText\n          curSizeDom.classList.add('active')\n        } else {\n          sizeSelectDom.innerText = `${payload.size}`\n        }\n        payload.bold ?\n          boldDom.classList.add('active') :\n          boldDom.classList.remove('active')\n        payload.italic ?\n          italicDom.classList.add('active') :\n          italicDom.classList.remove('active')\n        payload.underline ?\n          underlineDom.classList.add('active') :\n          underlineDom.classList.remove('active')\n        payload.strikeout ?\n          strikeoutDom.classList.add('active') :\n          strikeoutDom.classList.remove('active')\n        if (payload.color) {\n          colorDom.classList.add('active')\n          colorControlDom.value = payload.color\n          colorSpanDom.style.backgroundColor = payload.color\n        } else {\n          colorDom.classList.remove('active')\n          colorControlDom.value = '#000000'\n          colorSpanDom.style.backgroundColor = '#000000'\n        }\n        if (payload.highlight) {\n          highlightDom.classList.add('active')\n          highlightControlDom.value = payload.highlight\n          highlightSpanDom.style.backgroundColor = payload.highlight\n        } else {\n          highlightDom.classList.remove('active')\n          highlightControlDom.value = '#ffff00'\n          highlightSpanDom.style.backgroundColor = '#ffff00'\n        }\n\n        // 行布局\n        leftDom.classList.remove('active')\n        centerDom.classList.remove('active')\n        rightDom.classList.remove('active')\n        alignmentDom.classList.remove('active')\n        if (payload.rowFlex && payload.rowFlex === 'right') {\n          rightDom.classList.add('active')\n        } else if (payload.rowFlex && payload.rowFlex === 'center') {\n          centerDom.classList.add('active')\n        } else if (payload.rowFlex && payload.rowFlex === 'alignment') {\n          alignmentDom.classList.add('active')\n        } else {\n          leftDom.classList.add('active')\n        }\n\n        // 行间距\n        rowOptionDom\n          .querySelectorAll < HTMLLIElement > ('li')\n          .forEach(li => li.classList.remove('active'))\n        const curRowMarginDom = rowOptionDom.querySelector < HTMLLIElement > (\n            `[data-rowmargin='${payload.rowMargin}']`\n          ) !\n          curRowMarginDom.classList.add('active')\n\n        // 功能\n        payload.undo ?\n          undoDom.classList.remove('no-allow') :\n          undoDom.classList.add('no-allow')\n        payload.redo ?\n          redoDom.classList.remove('no-allow') :\n          redoDom.classList.add('no-allow')\n        payload.painter ?\n          painterDom.classList.add('active') :\n          painterDom.classList.remove('active')\n\n        // 标题\n        titleOptionDom\n          .querySelectorAll < HTMLLIElement > ('li')\n          .forEach(li => li.classList.remove('active'))\n        if (payload.level) {\n          const curTitleDom = titleOptionDom.querySelector < HTMLLIElement > (\n              `[data-level='${payload.level}']`\n            ) !\n            titleSelectDom.innerText = curTitleDom.innerText\n          curTitleDom.classList.add('active')\n        } else {\n          titleSelectDom.innerText = '正文'\n          titleOptionDom.querySelector('li:first-child') !.classList.add('active')\n        }\n\n        // 列表\n        listOptionDom\n          .querySelectorAll < HTMLLIElement > ('li')\n          .forEach(li => li.classList.remove('active'))\n        if (payload.listType) {\n          listDom.classList.add('active')\n          const listType = payload.listType\n          const listStyle =\n            payload.listType === ListType.OL ? ListStyle.DECIMAL : payload.listType\n          const curListDom = listOptionDom.querySelector < HTMLLIElement > (\n            `[data-list-type='${listType}'][data-list-style='${listStyle}']`\n          )\n          if (curListDom) {\n            curListDom.classList.add('active')\n          }\n        } else {\n          listDom.classList.remove('active')\n        }\n\n        // 批注\n        commentDom\n          .querySelectorAll < HTMLDivElement > ('.comment-item')\n          .forEach(commentItemDom => {\n            commentItemDom.classList.remove('active')\n          })\n        if (payload.groupIds) {\n          const [id] = payload.groupIds\n          const activeCommentDom = commentDom.querySelector < HTMLDivElement > (\n            `.comment-item[data-id='${id}']`\n          )\n          if (activeCommentDom) {\n            activeCommentDom.classList.add('active')\n            scrollIntoView(commentDom, activeCommentDom)\n          }\n        }\n      }\n\n      instance.listener.visiblePageNoListChange = function (payload) {\n        const text = payload.map(i => i + 1).join('、')\n        document.querySelector < HTMLSpanElement > ('.page-no-list') !.innerText = text\n      }\n\n      instance.listener.pageSizeChange = function (payload) {\n        document.querySelector < HTMLSpanElement > (\n          '.page-size'\n        ) !.innerText = `${payload}`\n      }\n\n      instance.listener.intersectionPageNoChange = function (payload) {\n        document.querySelector < HTMLSpanElement > ('.page-no') !.innerText = `${payload + 1\n      }`\n      }\n\n      instance.listener.pageScaleChange = function (payload) {\n        document.querySelector < HTMLSpanElement > (\n          '.page-scale-percentage'\n        ) !.innerText = `${Math.floor(payload * 10 * 10)}%`\n      }\n\n      instance.listener.controlChange = function (payload) {\n        const disableMenusInControlContext = [\n          'superscript',\n          'subscript',\n          'table',\n          'image',\n          'hyperlink',\n          'separator',\n          'codeblock',\n          'page-break',\n          'control',\n          'checkbox'\n        ]\n        // 菜单操作权限\n        disableMenusInControlContext.forEach(menu => {\n          const menuDom = document.querySelector < HTMLDivElement > (\n              `.menu-item__${menu}`\n            ) !\n            payload ?\n            menuDom.classList.add('disable') :\n            menuDom.classList.remove('disable')\n        })\n      }\n\n      instance.listener.pageModeChange = function (payload) {\n        const activeMode = pageModeOptionsDom.querySelector < HTMLLIElement > (\n            `[data-page-mode='${payload}']`\n          ) !\n          pageModeOptionsDom\n          .querySelectorAll('li')\n          .forEach(li => li.classList.remove('active'))\n        activeMode.classList.add('active')\n      }\n\n      const handleContentChange = async function () {\n        // 字数\n        const wordCount = await instance.command.getWordCount()\n        console.log(instance)\n        document.querySelector < HTMLSpanElement > ('.word-count') !.innerText = `${wordCount || 0\n      }`\n        // 目录\n        if (isCatalogShow) {\n          nextTick(() => {\n            updateCatalog()\n          })\n        }\n        // 批注\n        nextTick(() => {\n          updateComment()\n        })\n      }\n      instance.listener.contentChange = debounce(handleContentChange, 200)\n      handleContentChange()\n\n      instance.listener.saved = function (payload) {\n        console.log('elementList: ', payload)\n      }\n\n      // 9. 右键菜单注册\n      instance.register.contextMenuList([{\n          name: '批注',\n          when: payload => {\n            return (\n              !payload.isReadonly &&\n              payload.editorHasSelection &&\n              payload.zone === EditorZone.MAIN\n            )\n          },\n          callback: (command: Command) => {\n            new Dialog({\n              title: '批注',\n              data: [{\n                type: 'textarea',\n                label: '批注',\n                height: 100,\n                name: 'value',\n                required: true,\n                placeholder: '请输入批注'\n              }],\n              onConfirm: payload => {\n                let value1 = payload.find(p => p.name === 'value')\n\n                const value = !!value1 ? value1.value : ''\n                if (!value) return\n                const groupId = command.executeSetGroup()\n                if (!groupId) return\n                commentList.push({\n                  id: groupId,\n                  content: value,\n                  userName: 'Hufe',\n                  rangeText: command.getRangeText(),\n                  createdDate: new Date().toLocaleString()\n                })\n              }\n            })\n          }\n        },\n        {\n          name: '签名',\n          icon: 'signature',\n          when: payload => {\n            return !payload.isReadonly && payload.editorTextFocus\n          },\n          callback: (command: Command) => {\n            new Signature({\n              onConfirm(payload) {\n                if (!payload) return\n                const {\n                  value,\n                  width,\n                  height\n                } = payload\n                if (!value || !width || !height) return\n                command.executeInsertElementList([{\n                  value,\n                  width,\n                  height,\n                  type: ElementType.IMAGE\n                }])\n              }\n            })\n          }\n        },\n        {\n          name: '格式整理',\n          icon: 'word-tool',\n          when: payload => {\n            return !payload.isReadonly\n          },\n          callback: (command: Command) => {\n            command.executeWordTool()\n          }\n        }\n      ])\n\n      // 10. 快捷键注册\n      instance.register.shortcutList([{\n          key: KeyMap.P,\n          mod: true,\n          isGlobal: true,\n          callback: (command: Command) => {\n            command.executePrint()\n          }\n        },\n        {\n          key: KeyMap.F,\n          mod: true,\n          isGlobal: true,\n          callback: (command: Command) => {\n            const text = command.getRangeText()\n            searchDom.click()\n            if (text) {\n              searchInputDom.value = text\n              instance.command.executeSearch(text)\n              setSearchResult()\n            }\n          }\n        },\n        {\n          key: KeyMap.MINUS,\n          ctrl: true,\n          isGlobal: true,\n          callback: (command: Command) => {\n            command.executePageScaleMinus()\n          }\n        },\n        {\n          key: KeyMap.EQUAL,\n          ctrl: true,\n          isGlobal: true,\n          callback: (command: Command) => {\n            command.executePageScaleAdd()\n          }\n        },\n        {\n          key: KeyMap.ZERO,\n          ctrl: true,\n          isGlobal: true,\n          callback: (command: Command) => {\n            command.executePageScaleRecovery()\n          }\n        }\n      ])\n    },\n    methods: {\n      setHtml(val: any) {\n        console.log(val)\n        instanceExport.command.executeInsertElementList(val)\n      }\n    }\n  })\n</script>\n<style scoped>\n  .editbox {\n    width: 794px;\n    height: calc(100% - 80px);\n    display: flex;\n    position: relative;\n    margin: 0 auto;\n  }\n\n  .contentHtml {\n    width: 595px !important;\n    height: 842px !important;\n    background: #fff;\n  }\n\n  #printHtml {\n    width: 100%;\n    page-break-after: always;\n  }\n\n  .left-edit {\n    width: 595px;\n    height: 100%;\n    display: inline-block;\n  }\n\n  #canvas {\n    width: 100%;\n    height: 100%;\n    /* height: calc(100vh - 75px); */\n    overflow-y: auto;\n  }\n\n  .center-btn {\n    width: 500px;\n    display: inline-block;\n    height: 900px;\n    border: 1px solid #ededed;\n    background: #fff;\n  }\n\n  @media print {\n\n    @page {\n\n      size: 1108px 1600px;\n\n    }\n\n  }\n\n  .ownInput:empty::before {\n    content: attr(placeholder);\n  }\n\n  >>>.ownInput {\n    display: inline-block;\n    width: 150px;\n    height: 28px;\n  }\n\n  >>>tr {\n    page-break-inside: avoid;\n  }\n\n  .dio {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 99;\n    opacity: 0;\n  }\n</style>\n<style scoped lang=\"scss\">\n  .menu {\n    width: 794px;\n    height: 90px;\n    display: block;\n    top: 148px;\n  }\n\n  .menu-item {\n    height: 42px;\n    padding-left: 20px;\n  }\n\n  .footer {\n    position: absolute;\n    left: 0;\n    width: 794px;\n  }\n\n  .editor>div {\n    margin: 95px auto;\n  }\n</style>\n<style>\n  .menu {\n    width: 808px;\n    height: 90px;\n    display: block;\n    top: 37px !important;\n    z-index: 99;\n  }\n\n  .menu-item {\n    height: 42px;\n    padding-left: 20px;\n  }\n\n  .footer {\n    position: absolute;\n    left: 0;\n    width: 808px;\n  }\n\n  .editor>div {\n    margin: 95px auto;\n  }\n</style>"]}]}